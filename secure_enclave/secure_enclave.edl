#define ECDSA_SKEY_LEN 65
#define ECDSA_SKEY_BASE 16
#define ECDSA_ENCR_LEN 93
#define ECDSA_BIN_LEN 33
#define SMALL_BUF_SIZE 1024
#define VERY_SMALL_BUF_SIZE 512
#define TINY_BUF_SIZE 256

enclave {

    from "SGXSanRTEnclave.edl" import *;
    from "sgx_pthread.edl" import *;

	trusted {
		include "sgx_tgmp.h"

		public void trustedEnclaveInit(uint64_t _logLevel);

        public void trustedGenerateSEK(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char *err_string,
                                [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,
                                [out] uint64_t *enc_len,
                                [out, count = 65] char* hex_SEK);

        public void trustedSetSEK(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char *err_string,
                                [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK);

        public void trustedSetSEKBackup(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char *err_string,
                                [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,
                                [out] uint64_t *enc_len,
                                [in, string] const char* SEK_hex);

        public void trustedGenerateEcdsaKey (
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = 1] int *is_exportable,
                                [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                [out] uint64_t *enc_len,
                                [out, count = SMALL_BUF_SIZE] char * pub_key_x,
                                [out, count = SMALL_BUF_SIZE] char * pub_key_y);

        public void trustedGetPublicEcdsaKey(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t dec_len,
                                [out, count = SMALL_BUF_SIZE] char * pub_key_x,
                                [out, count = SMALL_BUF_SIZE] char * pub_key_y);

        public void trustedEcdsaSign(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t enc_len,
                                [in, string] const char* hash,
                                [out, count = SMALL_BUF_SIZE] char* sig_r,
                                [out, count = SMALL_BUF_SIZE] char* sig_s,
                                [out] uint8_t* sig_v,
                                int base);

        public void trustedEncryptKey (
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = SMALL_BUF_SIZE] const char* key,
                                [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                [out] uint64_t *enc_len);

        public void trustedDecryptKey (
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t enc_len,
                                [out, count = SMALL_BUF_SIZE] char* key );

        public void trustedGenDkgSecret (
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [out, count = 3072] uint8_t* encrypted_dkg_secret,
                                [out] uint64_t * enc_len, size_t _t);

        public void trustedDecryptDkgSecret (
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = 3050] uint8_t* encrypted_dkg_secret,
                                uint64_t enc_len,
                                [out, count = 3072] uint8_t* decrypted_dkg_secret
                                );

        public void trustedGetEncryptedSecretShare(
                                [out]int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char *err_string,
                                [in, count = 3050] uint8_t* encrypted_poly,
                                uint64_t enc_len,
                                [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,
                                [out] uint64_t* dec_len,
                                [out, count = 193] char* result_str,
                                [out, count = 320] char* s_shareG2,
                                [in, string] char* pub_keyB,
                                uint8_t _t,
                                uint8_t _n,
                                uint8_t ind);

        public void trustedGetEncryptedSecretShareV2(
                                [out]int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char *err_string,
                                [in, count = 3050] uint8_t* encrypted_poly,
                                uint64_t enc_len,
                                [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,
                                [out] uint64_t* dec_len,
                                [out, count = 193] char* result_str,
                                [out, count = 320] char* s_shareG2,
                                [in, string] char* pub_keyB,
                                uint8_t _t,
                                uint8_t _n,
                                uint8_t ind);

        public void trustedGetPublicShares(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = 3050] uint8_t* encrypted_dkg_secret,
                                uint64_t enc_len,
                                [out, count = 10000] char* public_shares,
                                unsigned _t);

        public void trustedDkgVerify(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, string] const char* public_shares,
                                [in, string] const char* s_share,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t key_len,
                                unsigned _t,
                                int _ind,
                                [out] int* result);

        public void trustedDkgVerifyV2(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, string] const char* public_shares,
                                [in, string] const char* s_share,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t key_len,
                                unsigned _t,
                                int _ind,
                                [out] int* result);

        public void trustedCreateBlsKey(
                                [out]int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = 6145] const char* s_shares,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t key_len,
                                [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,
                                [out] uint64_t *enc_bls_key_len);

        public void trustedCreateBlsKeyV2(
                                [out]int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = 6145] const char* s_shares,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t key_len,
                                [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,
                                [out] uint64_t *enc_bls_key_len);

        public void trustedBlsSignMessage (
                                [out] int *errStatus,
                                [out, count = TINY_BUF_SIZE] char* err_string,
                                [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t enc_len,
                                [in, string] char* hashX ,
                                [in, string] char* hashY,
                                [out, count = SMALL_BUF_SIZE] char* signature);

        public void trustedGetBlsPubKey(
                                [out]int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                uint64_t key_len,
                                [out, count = 320] char* bls_pub_key);
        
        public void trustedGetDecryptionShare(
                                [out]int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* err_string,
                                [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,
                                [in, count = 320] const char* public_decryption_value,
                                uint64_t key_len,
                                [out, count = 320] char* decrption_share);

        public void trustedGenerateBLSKey(
                                [out] int *errStatus,
                                [out, count = SMALL_BUF_SIZE] char* errString,
                                [in, count = 1] int *isExportable,
                                [out, count = SMALL_BUF_SIZE] uint8_t* encryptedKey,
                                [out] uint64_t *encLen
                                );
        };

	untrusted {
		include "gmp.h"

		uint64_t oc_realloc([user_check] void *optr, size_t osz, size_t nsz);
		void oc_printf([in, string] const char *str);
		void oc_free([user_check] void *optr, size_t sz);
	};
};
